enum Role {
    USER
    ADMIN
    ORGANIZER
}

enum PaymentStatus {
    PENDING
    PAID
    FAILED
    CANCELLED
}

enum TicketStatus {
    AVAILABLE
    SOLD_OUT
    INACTIVE
}

enum PaymentCategory {
    DEBIT
    CREDIT
    VA
    QRIS
    EWALLET
}

enum MemberTier {
    CLASSIC
    PLATINUM
    SIGNATURE
    INFINTE
    WORLD_ELITE
}

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    role          Role      @default(USER)
    date_of_birth DateTime? @map("tanggal_lahir")
    phone_number  String?   @map("nomor_telepon")
    password      String?
    session_token String?
    created_at    DateTime  @default(now())
    is_member     Boolean   @default(false)

    member           Member?
    accounts         Account[]
    sessions         Session[]
    organizations    Organization[]       @relation("UserOrganizations")
    notifications    Notification[]
    devices          UserDevice[]
    paymentHistories PaymentHistory[]
    organizedEvents  Event[]              @relation("EventOrganizer")
    credentials      Credential[]
    eventAnalytics   EventAnalytics[]     @relation("OrganizerAnalytics")
    paymentChannels  UserPaymentChannel[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Organization {
    id          String   @id @default(cuid())
    name        String
    description String
    location    String
    joined_at   DateTime
    created_at  DateTime @default(now())
    userId      String
    url_name    String   @unique
    is_verified Boolean  @default(false)

    user            User                @relation("UserOrganizations", fields: [userId], references: [id])
    events          Event[]
    paymentChannels OrgPaymentChannel[]
}

model Event {
    id             String   @id @default(cuid())
    organizationId String
    name           String
    description    String
    capacity       Int
    organizerId    String
    started_at     DateTime
    ended_at       DateTime
    promo_id       String?
    is_fullybooked Boolean
    max_capacity   Int
    ticket_count   Int
    is_promo       Boolean
    labels         String[]
    created_at     DateTime @default(now())

    organization     Organization     @relation(fields: [organizationId], references: [id])
    organizer        User             @relation("EventOrganizer", fields: [organizerId], references: [id])
    promo            PromoCode?       @relation("EventPromo", fields: [promo_id], references: [id])
    tickets          Ticket[]
    analytics        EventAnalytics?
    paymentHistories PaymentHistory[]
    invoices         EventInvoice[]
}

model PromoCode {
    id                      String   @id @default(cuid())
    code                    String
    amount                  Float
    valid_thru              DateTime
    description             String
    max_promo_used_per_user Int
    created_at              DateTime @default(now())

    events Event[] @relation("EventPromo")
}

model Ticket {
    id             String       @id @default(cuid())
    name           String
    description    String
    price          Float
    total_price    Float
    sales_start_at DateTime
    sales_ended_at DateTime
    status         TicketStatus
    created_at     DateTime     @default(now())
    eventId        String

    event            Event               @relation(fields: [eventId], references: [id])
    paymentHistories PaymentHistory[]
    invoices         EventInvoice[]
    paymentChannels  OrgPaymentChannel[] @relation("TicketPaymentChannels")
}

model EventAnalytics {
    id                 String   @id @default(cuid())
    total_event        String
    ticket_sold        Int
    revenue_per_ticket Float
    total_revenue      Float
    tickets_made       Int
    customers_total    Int
    created_at         DateTime @default(now())
    eventId            String   @unique
    organizerId        String

    event     Event @relation(fields: [eventId], references: [id])
    organizer User  @relation("OrganizerAnalytics", fields: [organizerId], references: [id])
}

model PaymentHistory {
    id                   String        @id @default(cuid())
    ticketId             String
    bookingId            String
    eventId              String
    payment_status       PaymentStatus
    userId               String
    userPaymentChannelId String

    ticket            Ticket             @relation(fields: [ticketId], references: [id])
    event             Event              @relation(fields: [eventId], references: [id])
    user              User               @relation(fields: [userId], references: [id])
    userPaymentMethod UserPaymentChannel @relation(fields: [userPaymentChannelId], references: [id])
}

model UserDevice {
    id            String   @id @default(cuid())
    userId        String
    session_token String?
    device_name   String
    user_agent    String
    last_used_at  DateTime
    device_token  String   @unique
    is_active     Boolean  @default(true)
    created_at    DateTime @default(now())

    user       User         @relation(fields: [userId], references: [id])
    Credential Credential[]
}

model Notification {
    id          String   @id @default(cuid())
    title       String
    description String
    detail      String?
    userId      String
    is_readed   Boolean
    created_at  DateTime @default(now())

    user User @relation(fields: [userId], references: [id])
}

model Credential {
    id           String      @id @default(cuid())
    user         User        @relation(fields: [userId], references: [id])
    userId       String
    credentialID String      @unique
    publicKey    String
    counter      Int
    challenge    String
    transports   String?
    lastUsedAt   DateTime?
    deviceId     String?
    is_active    Boolean     @default(true)
    device       UserDevice? @relation(fields: [deviceId], references: [id])
    createdAt    DateTime    @default(now())
}

model Media {
    id        String   @id @default(cuid())
    name      String
    type      String
    size      Int
    url       String
    eventId   String?
    createdAt DateTime @default(now())
}

model PaymentChannel {
    id        String          @id @default(cuid())
    name      String
    type      PaymentCategory
    createdAt DateTime        @default(now())

    orgChannels OrgPaymentChannel[]
}

model UserPaymentChannel {
    id            String          @id @default(cuid())
    userId        String
    externalId    String
    type          PaymentCategory
    token         String
    design        String          @default("default")
    card_expired  String
    issuer_bank   String
    masked_number String
    scheme        String
    tier          String
    logo          String
    isActive      Boolean         @default(true)
    isPrimary     Boolean         @default(false)
    createdAt     DateTime        @default(now())

    user             User             @relation(fields: [userId], references: [id])
    paymentHistories PaymentHistory[]
}

model OrgPaymentChannel {
    id               String   @id @default(cuid())
    organizationId   String
    paymentChannelId String
    createdAt        DateTime @default(now())

    organization   Organization   @relation(fields: [organizationId], references: [id])
    paymentChannel PaymentChannel @relation(fields: [paymentChannelId], references: [id])
    tickets        Ticket[]       @relation("TicketPaymentChannels")
}

model EventInvoice {
    id        String   @id
    ticketId  String
    eventId   String
    bookingId String
    createdAt DateTime @default(now())

    event  Event  @relation(fields: [eventId], references: [id])
    ticket Ticket @relation(fields: [ticketId], references: [id])
}

model Member {
    id            String     @id
    member_number String        @unique
    member_name String
    points        Int        @default(0)
    joined_since  DateTime   @default(now())
    tier          MemberTier @default(CLASSIC)
    userId        String     @unique
    referal_code String @unique @default("")
    user User @relation(fields: [userId], references: [id])
}
