enum Role {
    USER
    ADMIN
    ORGANIZER
}

enum PaymentStatus {
    PENDING
    PAID
    FAILED
    CANCELLED
}

enum PaymentCategory {
    DEBIT
    CREDIT
    VA
    QRIS
    EWALLET
}

enum MemberTier {
    CLASSIC
    PLATINUM
    SIGNATURE
    INFINTE
    WORLD_ELITE
}

enum UserDefaultVerificationMethod {
    BIOMETRIC
    PIN
}

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                   String                         @id @default(cuid())
    name                 String?
    email                String?                        @unique
    emailVerified        DateTime?                      @map("email_verified")
    image                String?
    role                 Role                           @default(USER)
    date_of_birth        DateTime?                      @map("tanggal_lahir")
    phone_number         String?                        @map("nomor_telepon")
    password             String?
    session_token        String?
    created_at           DateTime                       @default(now())
    is_member            Boolean                        @default(false)
    default_verification UserDefaultVerificationMethod?

    member           Member?
    accounts         Account[]
    sessions         Session[]
    devices          UserDevice[]
    paymentHistories PaymentHistory[]
    credentials      Credential[]
    paymentChannels  UserPaymentChannel[]
    pin              PinBlocks?
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model PaymentHistory {
    id                   String        @id @default(cuid())
    ticketId             String
    bookingId            String
    eventId              String
    payment_status       PaymentStatus
    userId               String
    userPaymentChannelId String
    user              User               @relation(fields: [userId], references: [id])
    userPaymentMethod UserPaymentChannel @relation(fields: [userPaymentChannelId], references: [id])
}

model UserDevice {
    id            String   @id @default(cuid())
    userId        String
    session_token String?
    device_name   String
    user_agent    String
    last_used_at  DateTime
    device_token  String   @unique
    is_active     Boolean  @default(true)
    created_at    DateTime @default(now())

    user       User         @relation(fields: [userId], references: [id])
    Credential Credential[]
}

model Credential {
    id           String      @id @default(cuid())
    user         User        @relation(fields: [userId], references: [id])
    userId       String
    credentialID String      @unique
    publicKey    String
    counter      Int
    challenge    String
    transports   String?
    lastUsedAt   DateTime?
    deviceId     String?
    is_active    Boolean     @default(true)
    device       UserDevice? @relation(fields: [deviceId], references: [id])
    createdAt    DateTime    @default(now())
}

model PinBlocks {
    id         String   @id @default(cuid())
    blocks     String
    userId     String   @unique
    is_active  Boolean
    createdAt  DateTime @default(now())
    modifiedAt DateTime
    user       User     @relation(fields: [userId], references: [id])
}

model UserPaymentChannel {
    id            String          @id @default(cuid())
    userId        String
    externalId    String
    type          PaymentCategory
    token         String
    design        String          @default("default")
    card_expired  String
    issuer_bank   String
    masked_number String
    scheme        String
    tier          String
    logo          String
    isActive      Boolean         @default(true)
    isPrimary     Boolean         @default(false)
    createdAt     DateTime        @default(now())

    user             User             @relation(fields: [userId], references: [id])
    paymentHistories PaymentHistory[]
}

model Member {
    id            String     @id
    member_number String     @unique
    member_name   String
    points        Int        @default(0)
    joined_since  DateTime   @default(now())
    tier          MemberTier @default(CLASSIC)
    userId        String     @unique
    referal_code  String     @unique @default("")
    user          User       @relation(fields: [userId], references: [id])
}
